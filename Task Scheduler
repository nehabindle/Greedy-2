class Solution {
    public int leastInterval(char[] tasks, int n) {
        if(tasks == null || tasks.length == 0)
        {
            return 0;
        }
        
        int maxCount = 0;
        int maxFreq = 0;
        
        HashMap<Character, Integer> map = new HashMap<>();
        
        for(int i=0; i<tasks.length; i++)
        {
            if(!map.containsKey(tasks[i]))
            {
                map.put(tasks[i],0);
            }
            
            int count = map.get(tasks[i])+1;
            map.put(tasks[i],count);
            maxFreq = Math.max(maxFreq, count);
        }
        
        for(int val: map.values())
        {
            if(val==maxFreq)
                maxCount++;
        }
        
        int partitions = maxFreq-1;
        int empty = (n-(maxCount-1))*partitions;
        int pendingTasks = tasks.length - (maxFreq * maxCount);
        int idle = Math.max(0,empty-pendingTasks);
        return tasks.length+idle;
    }
}
